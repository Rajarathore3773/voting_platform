<style>
  .ballot-container {
    max-width: 500px;
    margin: 2rem auto;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    padding: 2rem;
  }
  .ballot-container h1, .ballot-container p {
    text-align: center;
    color: #333;
  }
  #candidates-list {
    margin: 2rem 0 1rem 0;
    padding: 0;
    list-style: none;
  }
  .candidate-item {
    padding: 0.7rem 1rem;
    background: #f7f7f7;
    border: 1px solid #ccc;
    border-radius: 4px;
    margin-bottom: 0.7rem;
    cursor: grab;
    display: flex;
    align-items: center;
    transition: all 0.2s ease;
    user-select: none;
  }
  .candidate-item:hover {
    background: #e6f0ff;
    box-shadow: 0 2px 8px rgba(0,123,255,0.08);
    transform: translateY(-1px);
  }
  .candidate-item:active {
    cursor: grabbing;
  }
  .candidate-item.dragging {
    opacity: 0.8;
    transform: rotate(2deg);
  }
  .candidate-item span:last-child {
    margin-left: 1rem;
    color: #888;
    font-size: 1.2em;
  }
  .actions {
    text-align: center;
    margin-top: 2rem;
  }
  .actions input[type="submit"] {
    background: #007bff;
    color: #fff;
    border: none;
    padding: 0.7rem 1.5rem;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
    transition: background 0.2s;
  }
  .actions input[type="submit"]:hover {
    background: #0056b3;
  }
  .actions input[type="submit"]:disabled {
    background: #6c757d;
    cursor: not-allowed;
  }
  .loading {
    opacity: 0.6;
    pointer-events: none;
  }
  .drag-instructions {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    padding: 1rem;
    margin-bottom: 1rem;
    text-align: center;
    color: #6c757d;
  }
</style>

<div class="ballot-container">
  <h1>Ranked Choice Ballot for <%= @election.title %></h1>

  <div class="drag-instructions">
    <p><strong>Instructions:</strong> Drag and drop the candidates to rank them in your order of preference (top = most preferred)</p>
    <p><small>ðŸ’¡ Click on a candidate to move it to the top if drag and drop doesn't work</small></p>
  </div>

  <%= form_with url: submit_ballot_election_path(@election), method: :post, local: true, id: 'ballot-form', data: { turbo: false } do %>
    <ul id="candidates-list">
      <% @candidates.each do |candidate| %>
        <li data-id="<%= candidate.id %>" class="candidate-item" draggable="true">
          <span style="flex:1;"><%= candidate.name %></span>
          <input type="hidden" name="rankings[]" value="<%= candidate.id %>">
          <span>&#x2630;</span>
        </li>
      <% end %>
    </ul>
    <div class="actions">
      <%= submit_tag "Submit Ballot", id: "submit-ballot" %>
    </div>
  <% end %>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const list = document.getElementById('candidates-list');
  const items = list.querySelectorAll('.candidate-item');
  
  // Simple drag and drop implementation
  let draggedItem = null;
  
  items.forEach(item => {
    // Drag events
    item.addEventListener('dragstart', function(e) {
      draggedItem = this;
      this.classList.add('dragging');
    });
    
    item.addEventListener('dragend', function(e) {
      this.classList.remove('dragging');
      updateInputs();
    });
    
    // Click fallback
    item.addEventListener('click', function(e) {
      if (e.target.tagName !== 'INPUT') {
        moveToTop(this);
      }
    });
  });
  
  // Drop zone events
  list.addEventListener('dragover', function(e) {
    e.preventDefault();
  });
  
  list.addEventListener('drop', function(e) {
    e.preventDefault();
    if (draggedItem) {
      const afterElement = getDragAfterElement(this, e.clientY);
      if (afterElement == null) {
        this.appendChild(draggedItem);
      } else {
        this.insertBefore(draggedItem, afterElement);
      }
    }
  });
  
  function getDragAfterElement(container, y) {
    const draggableElements = [...container.querySelectorAll('.candidate-item:not(.dragging)')];
    
    return draggableElements.reduce((closest, child) => {
      const box = child.getBoundingClientRect();
      const offset = y - box.top - box.height / 2;
      
      if (offset < 0 && offset > closest.offset) {
        return { offset: offset, element: child };
      } else {
        return closest;
      }
    }, { offset: Number.NEGATIVE_INFINITY }).element;
  }
  
  function moveToTop(item) {
    const firstItem = list.querySelector('.candidate-item');
    if (firstItem !== item) {
      list.insertBefore(item, firstItem);
      updateInputs();
    }
  }
  
  function updateInputs() {
    const form = list.closest('form');
    if (!form) return;
    
    // Remove existing inputs
    form.querySelectorAll('input[name="rankings[]"]').forEach(input => input.remove());
    
    // Add new inputs in order
    list.querySelectorAll('.candidate-item').forEach(item => {
      const candidateId = item.getAttribute('data-id');
      const input = document.createElement('input');
      input.type = 'hidden';
      input.name = 'rankings[]';
      input.value = candidateId;
      form.appendChild(input);
    });
  }
  
  // Form submission
  const form = document.getElementById('ballot-form');
  const submitBtn = document.getElementById('submit-ballot');
  
  if (form && submitBtn) {
    form.addEventListener('submit', function() {
      submitBtn.disabled = true;
      submitBtn.value = 'Submitting...';
      form.classList.add('loading');
    });
  }
});
</script>
